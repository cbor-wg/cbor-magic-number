---
title: On storing CBOR encoded items on stable storage
abbrev: cbor-file-magic
docname: draft-richardson-cbor-file-magic-01

stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:


- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

contributor:
  - name: Carsten Borman
    email: cabo@tzi.org
  - name: Josef 'Jeff' Sipek 
    email: jeffpc@josefsipek.net

normative:
  BCP14: RFC8174
  RFC8949:
  RFC8742:

informative:
  file:
    title: "file (command)"
    target: "https://en.wikipedia.org/wiki/File_%28command%29"
    author:
      org: Wikipedia
    date: 2021-01-20

  ilbm:
    title: "Interleaved BitMap"
    target: "https://en.wikipedia.org/wiki/ILBM"
    author:
      org: Wikipedia
    date: 2021-01-20

--- abstract

This document proposes an on-disk format for CBOR objects that
is friendly to common on-disk recognition systems like the Unix file(1) command.

This document is being discussed at: https://github.com/mcr/cbor-magic-number

--- middle

# Introduction

Since very early in computing, operating systems have sought ways to mark which files could be processed by which programs.

For instance, the Unix file(1) command, which has existed since 1973 ({{file}}), has been able to identify many file formats for decades.
Many systems (Linux, MacOS, Windows) will select the correct application based upon the file contents, if the system can not determine it by other means: for instsance, MacOS maintains a resource fork that includes MIME information and therefore ideally never needs to know what anything about the file.
Other systems do this by file extensions.

While having a MIME type associated with the file is a better solution in general, when files become disconnected from their type information, such as when attempting to do forensics on a damaged system,
then being able to identify a file type can become very important.

It is noted that in the MIME type registration, that a magic number is asked for, if available, as is a file extension.

A challenge for the file(1) program is often that it can be confused by the encoding vs the content.
For instance, an Android "apk" used to transfer and store an application may be identified as a ZIP file.
Both OpenOffice or MSOffice files are XML files, but appear as ZIP, unless they are flat files, in which case they appear to be generic XML files.

As CBOR becomes a more and more common encoding for a wide variety of artifacts, identifying them as  CBOR is probably not useful.
This document provides a way to encode a magic number into the beginning of a CBOR format file.
Two options are presented, with the intention of standardizing only one.

These proposals are invasive to how CBOR protocols are written to disk, but in both cases, the
proposed envelope does not require that the tag be transfered on the wire.

In addition to the on-disk identification aspects, there are some protocols which may benefit from having such a magic on the wire if they presently using a different (legacy) encoding scheme.
The presence of the identifiable magic sequence signals that CBOR is being used or a legacy scheme.

# Requirements for a Magic Number

A magic number is ideally a unique fingerprint, present in the first 4 or 8 bytes of the file,
which does not change when the content change, and does not depend upon the length of the file.

Less ideal solutions have a pattern that needs to be matched, but in which some bytes need to be ignored.
While the Unix file(1) command can be told to ignore bytes, this can lead to ambiguities.

# Protocol Proposal

This proposal makes use of CBOR Sequences as described in {{RFC8742}}.

This proposal consists of two tags and a constant string for a total of 12 bytes.

1. The file shall start with the Self-described CBOR tag, 55799, as described in {{RFC8949}} section 3.4.6.
2. The file shall continue with a CBOR tag, from the First Come First Served space, which uniquely identifies the CBOR Protocol.  The use of a four-byte tag is encouraged.
3. The three byte CBOR array containing 0x42\_4F\_52. When encoded it shows up as "CBOR"

The first part identifies the file as being CBOR, and does so with all the desirable properties explained in {{RFC8949}} section 3.4.6.
Specifically, it does not seem to conflict with any known file types, and it is not valid Unicode.

The second part identifies which CBOR Protocol is used.
CBOR Protocol designers should obtain a tag for each major object that they might store on disk.
As there are more than 4 million available 4-byte tags, there should be issue in allocating a few to all available CBOR Protocols.
The policy is First Come First Served, so all that is required is an email to IANA, having filled in the small template provided in section 9.2 of {{RFC8949}}.

The third part is a constant value 0x43\_42\_4f\_52, "CBOR".
This means that should a file be reviewed by a human (directly in an editor, or in a hexdump display), it will include the string "CBOR" prominently.
The value is also included because the two tags need to tag something.

# Security Considerations

This document provides a way to identify CBOR Protocol objects.
Clearly identifying CBOR contents on disk may have a variety of impacts.

The most obvious is that it may allow malware to identify interesting objects on disk, and then corrupt them.

# IANA Considerations

This document makes no new requests to IANA.

# Acknowledgements

The CBOR WG brainstormed this protocol on January 20, 2021.

# Changelog

--- back

# Example from Openswan

The Openswan IPsec project has a daemon ("pluto"), and two control programs ("addconn", and "whack").
They communicate via a Unix-domain socket, over which a C-structure containing pointers to strings is serialized using a bespoke mechanism.
This is normally not a problem as the structure is compiled by the same compiler; but when there are upgrades it is possible for the daemon and the control programs to get out of sync by the bespoke serialization.
As a result, there are extra compenstations to deal with shutting the daemon down.
During testing it is sometimes the case that upgrades are backed out.

In addition, when doing unit testing, the easiest way to load policy is to use the
normal policy reading process, but that is not normally loaded in the daemon.
Instead the IPC that is normally send across the wire is compiled/serialized and placed in a file.
The above magic number is included in the file, and also on the IPC in order to distinguish the "shutdown" command CBOR operation.

In order to reduce the problems due to serialization, the serialization is being changed to CBOR.
Additionally, this change allows the IPC to be described by CDDL, and for any language that encode to CBOR can be used.

IANA has allocated the tag 1330664270, or 0x4f\_50\_ 53\_ 4e for this purpose.
As a result, each file and each IPC is prefixed with:

In diagnostic notation:
~~~~
55799(1330664270(h'424F52'))
~~~~

Or in hex:
~~~~
00000000  d9 d9 f7 da 4f 50 53 4e  43 42 4f 52              |....OPSNCBOR|
~~~~

